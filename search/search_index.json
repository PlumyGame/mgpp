{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MGPP","text":"<p>MGPP is an unofficial gradle plugin for Mindustry modding.</p> <p>It provides lots of functionalities for you to develop a mod or plugin.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Manage the Dependencies</p> <p>Importing the dependencies of arc and Mindustry automatically with configuration.</p> </li> <li> <p>Download the Game</p> <p>Downloading any version of Mindustry easily.</p> </li> <li> <p>Debug your Mod</p> <p>Being able to debug your mod and Mindustry with an IDE, such as IntelliJ IDEA.</p> </li> <li> <p>Work with Other Mods</p> <p>Starting the game with your mod and others to test the compatibility or interaction.</p> </li> <li> <p>Separate Working Space</p> <p>The configurable data directory of Mindustry Client located in a temporary folder as default to separate the environments of your all projects.</p> </li> <li> <p>Manage your Assets</p> <p>Assets will be copied into the output jar file with configuration.</p> </li> <li> <p>Generate Resource Class</p> <p>A class with references of assets to reduce boilerplate codes.</p> </li> <li> <p>Deploy on Android</p> <p>Deploy your mod compatible to Mindustry on Android. [Android SDK Required]</p> </li> </ul>"},{"location":"#more-info","title":"More Info","text":"<p>You can access the repository on GitHub to obtain more information.</p> <p>Also, there is a JavaDoc page for you to check up the API of mgpp.</p> <p>If you face any issue with mgpp, please contact us on Issue Report page.</p> <p>Join our Discord server to send us feedback or get help immediately.</p> <p>Welcome to contribute mgpp!</p>"},{"location":"#my-name","title":"My name?","text":"<p>MGPP means <code>Mindustry Gradle Plugin, named Plumy</code> (\u0e05\u055e\u2022 \u2022\u055e\u0e05)!</p> <p>by Liplum</p>"},{"location":"assets/advanced/","title":"Advanced","text":""},{"location":"assets/overview/","title":"Mindustry Assets","text":"<p>The <code>mindustryAssets</code> extension allows you to configure assets,  including <code>sprites</code>, <code>bundles</code>, <code>shaders</code>, <code>sounds</code> and anything you want to add into your mod.</p> <p>Assume your project has this structure: <pre><code>YourMod/\n\u251c\u2500 assets/\n\u2502  \u251c\u2500 bundles/\n\u2502  \u251c\u2500 sprites/\n\u251c\u2500 src/\n\u2502  \u251c\u2500 example/\n\u2502  \u2502  \u251c\u2500 ExampleMod.java\n\u251c\u2500 build.gradle\n\u251c\u2500 gradle.properties\n</code></pre></p>"},{"location":"assets/overview/#simple-usage","title":"Simple usage","text":""},{"location":"assets/overview/#assets","title":"Assets","text":"<p>In most cases, you can just simply copy all files recursively from the <code>assets root folder</code> into the <code>jar</code> task with this syntax:</p> GroovyKotlin <pre><code>mindustryAssets {\n    rootAt \"$projectDir/assets\"\n}\n</code></pre> <pre><code>import io.github.liplum.mindustry.*\nmindustryAssets {\n    root at \"$projectDir/assets\"\n}\n</code></pre>"},{"location":"assets/overview/#icon","title":"Icon","text":"<p>MGPP will automatically search for it by paths mentioned below orderly:</p> <ol> <li>projectDir/icon.png</li> <li>rootDir/icon.png</li> </ol> <p>Also, you can configure it to any file/path your want.</p> GroovyKotlin <pre><code>mindustryAssets {\n    iconAt \"$rootDir/icon.png\"\n}\n</code></pre> <pre><code>import io.github.liplum.mindustry.*\nmindustryAssets {\n    icon at \"$rootDir/icon.png\"\n}\n</code></pre>"},{"location":"assets/overview/#advanced-usage","title":"Advanced usage","text":"<p>MGPP provides <code>AssetBatchType</code> and <code>AssetBatch</code> for generating resource class, named <code>R.java</code> conventionally.</p> <p>Due to rare use cases,  please check its specific page for more information.</p>"},{"location":"home/installation/","title":"Installation","text":"<p>MGPP was published on Gradle Plugin Portal.</p> <p>Please make sure to always upgrade MGPP to the latest version: </p> Mindustry MGPP Version \u2264 135.2 v 1.1.1 \u2265 136 v 1.3.0"},{"location":"home/installation/#gradle-setup","title":"Gradle setup","text":"<ul> <li>Using the plugins DSL:</li> </ul> GroovyKotlin <pre><code>plugins {\n    id \"io.github.liplum.mgpp\" version \"&lt;version&gt;\"\n}\n</code></pre> <pre><code>plugins {\n    id(\"io.github.liplum.mgpp\") version \"&lt;version&gt;\"\n}\n</code></pre> <ul> <li>Using legacy plugin application:</li> </ul> GroovyKotlin <pre><code>buildscript {\n    repositories {\n        maven { url \"https://plugins.gradle.org/m2/\" }\n    }\n    dependencies {\n        classpath \"io.github.liplum.mgpp:MindustryGradlePluginPlumy:&lt;version&gt;\"\n    }\n}\n\napply plugin: \"io.github.liplum.mgpp\"\n</code></pre> <pre><code>buildscript {\n    repositories {\n        maven { url = uri(\"https://plugins.gradle.org/m2/\") }\n    }\n    dependencies {\n        classpath(\"io.github.liplum.mgpp:MindustryGradlePluginPlumy:&lt;version&gt;\")\n    }\n}\n\napply(plugin = \"io.github.liplum.mgpp\")\n</code></pre>"},{"location":"home/installation/#configuration","title":"Configuration","text":"<p>For ease of understanding, simplified examples are used here. Of course, it can still work for you.</p> GroovyKotlin <pre><code>mindustry {\n       dependency {\n        mindustry version: 'v136'\n        arc version: 'v136'\n    }\n    client {\n        official version: 'v136' \n    }\n    server {\n        official version: 'v136'\n    }\n}\nmindustryAssets {\n    rootAt \"$projectDir/assets\"\n}\n</code></pre> <pre><code>import io.github.liplum.mindustry.*\nmindustry {\n    dependency {\n        mindustry on \"v136\"\n        arc on \"v136\"\n    }\n    client {\n        mindustry official \"v136\"\n    }\n    server {\n        mindustry official \"v136\"\n    }\n}\nmindustryAssets {\n    root at \"$projectDir/assets\"\n}\n</code></pre>"},{"location":"home/installation/#dependency-setup","title":"Dependency setup","text":"<p>You can import the repositories where Mindustry was published by <code>mindustryRepo()</code>.</p> <p>You can use <code>importMindustry()</code> to import the Mindustry dependencies you have configured above.</p> GroovyKotlin <pre><code>repositories {\n    mavenCentral()\n    mindustryRepo()\n}\ndependencies {\n    importMindustry()\n}\n</code></pre> <pre><code>import io.github.liplum.mindustry.*\nrepositories {\n    mavenCentral()\n    mindustryRepo()\n}\ndependencies {\n    importMindustry()\n}\n</code></pre>"},{"location":"home/samples/","title":"Samples","text":""},{"location":"home/samples/#templates","title":"Templates","text":"<p>There is a template already initialized with mgpp for whom first time try mgpp.</p>"},{"location":"home/samples/#samples_1","title":"Samples","text":"<p>There are two official sample projects for testing purposes: Groovy Sample, Kotlin Sample, Multi-project Sample.</p>"},{"location":"mindustry/client/","title":"Client","text":"<p>The <code>client{}</code> closure is inside of <code>mindustry{}</code> closure hereinafter.</p> <p>Related tasks: <code>downloadClient</code>, <code>runClient</code></p> <p>NOTE: <code>Client</code> and <code>Server</code> configuration have almost the same syntax, so in these chapters, <code>client/server</code> are used, which indicates that syntax can work both sides. Please select the proper one.</p>"},{"location":"mindustry/client/#game-location","title":"Game location","text":"<p>The game location is an abstract file, which represents the Mindustry game.</p> <p>You can rename the downloaded file with this clause, <code>named</code>.</p> GroovyKotlin <pre><code>client/server {\n    official version: latest named 'LatestClient.jar'\n}\n</code></pre> <pre><code>client/server {\n    mindustry official latest named \"LatestClient.jar\"\n}\n</code></pre> <p>MGPP provides some simple clauses for downloading Mindustry: - official - be</p>"},{"location":"mindustry/client/#official","title":"Official","text":"<p>To download the game from Mindustry official release.  </p> GroovyKotlin <pre><code>client/server {\n    official version: 'v136'\n}\n</code></pre> <pre><code>client/server {\n    mindustry official \"v136\"\n}\n</code></pre> <p>As default, mgpp will download <code>v136</code>.</p>"},{"location":"mindustry/client/#notations","title":"Notations","text":"<ul> <li>latest: To download the latest official Mindustry from Mindustry official release, such as <code>v126.2</code>. NOTE: It will skip the pre-release.</li> </ul> GroovyKotlin <pre><code>client/server {\n    official version: latest\n}\n</code></pre> <pre><code>client/server {\n    mindustry official latest\n}\n</code></pre>"},{"location":"mindustry/client/#bleeding-edge","title":"Bleeding-edge","text":"<p>To download the bleeding-edge from Mindustry bleeding-edge release.  </p> GroovyKotlin <pre><code>client/server {\n    be version: '22853'\n}\n</code></pre> <pre><code>client/server {\n    mindustry be \"22853\"\n}\n</code></pre> <p>As default, mgpp will download a certain version to prevent errors when gradle configuring, but you shouldn't except this behavior.</p>"},{"location":"mindustry/client/#notations_1","title":"Notations","text":"<ul> <li>latest: To download the latest bleeding-edge Mindustry from Mindustry bleeding-edge release, such as <code>22853</code>.</li> </ul> GroovyKotlin <pre><code>client/server {\n    be version: latest\n}\n</code></pre> <pre><code>client/server {\n    be official latest\n}\n</code></pre>"},{"location":"mindustry/client/#from-local-file","title":"From local file","text":"<p>To copy the game file from a local file.</p> GroovyKotlin <pre><code>client/server {\n    fromLocal 'E:/Mindustry/myMindustry.jar'\n}\n</code></pre> <pre><code>client/server {\n    mindustry fromLocal 'E:/Mindustry/myMindustry.jar'\n}\n</code></pre>"},{"location":"mindustry/client/#overwrite-from-local-properties","title":"Overwrite from local properties","text":"<p>You can declare a property mentioned below in <code>local.properties</code>, mgpp will consider it as a path to overwrite what you have already set before</p> <ul> <li>For <code>client</code>: <code>mgpp.client.location</code></li> <li>For <code>server</code>: <code>mgpp.server.location</code></li> </ul> <p>TYPE: String</p> <pre><code>mgpp.client.location=E:/Mindustry/client.jar\nmgpp.server.location=E:/Mindustry/server.jar\n</code></pre>"},{"location":"mindustry/client/#foos-client","title":"Foo's Client","text":"<p>To download the Foo's Client from AntiGrief release.</p> <p>NOTE: Since Foo's Client isn't an official client, mgpp doesn't guarantee the arguments below will properly work in your times.</p> <p>At lease, as of press date, it works.  Therefore, you may have to configure it on your own if necessary. </p> GroovyKotlin <pre><code>client/server {\n    from Foo(\n        version: 'v8.0.0',\n        release: 'erekir-client.jar'\n    )\n}\n</code></pre> <pre><code>client/server {\n    mindustry from Foo(\n        version = \"v8.0.0\",\n        release = \"erekir-client.jar\"\n    )\n}\n</code></pre> <ul> <li>version: The tag/version of which release you want to download.</li> <li>release: The name of file attached into the release.</li> </ul>"},{"location":"mindustry/client/#keep-other-version","title":"Keep other version","text":"<p>Whether to keep other versions when a new version is downloaded.</p> <ul> <li><code>keepOthers</code>: To keep other versions when a new version is downloaded.</li> <li><code>clearUp</code>: To clean all other versions when a new version is downloaded.</li> </ul> GroovyKotlin <pre><code>client/server {\n    keepOthers\n    clearUp\n}\n</code></pre> <pre><code>client/server {\n    keepOthers\n    clearUp\n}\n</code></pre>"},{"location":"mindustry/client/#startup-args","title":"Startup args","text":"<p>The extra startup arguments for Mindustry game.</p> GroovyKotlin <pre><code>client/server {\n    args += [ '-gl2' ]\n}\n</code></pre> <pre><code>client/server {\n    args += listOf(\"-gl2\") \n}\n</code></pre>"},{"location":"mindustry/concepts/","title":"Concepts","text":""},{"location":"mindustry/concepts/#notations","title":"Notations","text":"<p>The notation always represents a term or works as a pronoun, such as <code>latest</code>, <code>localProperties</code>, <code>latestRelease</code>.</p>"},{"location":"mindustry/concepts/#on-the-fly","title":"On The Fly","text":"<p>It indicates this task will be registered after project evaluation, so you can't access it in your build.gradle[.kts] normally.</p> <p>You have to access it in this way:</p> GroovyKotlin <pre><code>tasks.whenTaskAdded { it -&gt;\n    if (it.name == 'jar') {\n        // do something\n    }\n}\n</code></pre> <pre><code>tasks.whenTaskAdded {\n    if (name == \"jar\" &amp;&amp; this is org.gradle.jvm.tasks.Jar) {\n        // do something\n    }\n}\n</code></pre>"},{"location":"mindustry/dependency/","title":"Dependency","text":""},{"location":"mindustry/dependency/#import","title":"Import","text":"<p>To apply the dependency configuration, you have to call <code>importMindustry()</code> when declaring dependency inside <code>dependencies{}</code> closure in your <code>build.gradle[.kts]</code>.</p> GroovyKotlin <pre><code>dependencies {\n    importMindustry()\n}\n</code></pre> <pre><code>import io.github.liplum.mindustry.*\ndependencies {\n    importMindustry()\n}\n</code></pre> <p>You can import Mindustry for a specific dependency configuration, such as <code>ksp</code> plugin.</p> GroovyKotlin <pre><code>dependencies {\n    importMindustry('ksp')\n}\n</code></pre> <pre><code>import io.github.liplum.mindustry.*\ndependencies {\n    importMindustry(\"ksp\")\n}\n</code></pre> <p>MGPP provides <code>dependency{}</code> closure for you to configure which version you want to use, and it's inside of <code>mindustry{}</code> closure hereinafter.</p>"},{"location":"mindustry/dependency/#arc-dependency","title":"Arc dependency","text":"<p>You can specify the which Arc version to use with this syntax.</p> GroovyKotlin <pre><code>dependency {\n    arc version: 'v136' // a released version\n    // OR\n    arc version: '47925a7b91' // a commit snapshot\n}\n</code></pre> <pre><code>dependency {\n    arc on \"v136\" // a released version\n    // OR\n    arc on \"47925a7b91\" // a commit snapshot\n}\n</code></pre> <p>As default, mgpp will apply <code>arc v136</code>.</p>"},{"location":"mindustry/dependency/#notations","title":"Notations","text":"<ul> <li>latest: To apply the latest commit of Arc,   such as <code>47925a7b91</code>. <p>NOTE: It might not work if you faced the API limit of GitHub or jitpack yet to build this version.</p> </li> <li>latestTag: To apply the latest tag of Arc, such as <code>v136</code>. <p>NOTE: It has a very small chance that it won't work when the new version was just released.</p> </li> </ul> GroovyKotlin <pre><code>dependency {\n    arc version: latest\n    arc version: latestTag\n}\n</code></pre> <pre><code>dependency {\n    arc on latest\n    arc on latestTag\n}\n</code></pre>"},{"location":"mindustry/dependency/#mindustry-dependency","title":"Mindustry Dependency","text":"<p>You can specify the which Mindustry version to use with this syntax.</p> <ul> <li>mindustry: only supports released versions</li> <li>mirror: only supports commit snapshots</li> </ul> GroovyKotlin <pre><code>dependency {\n    mindustry version: 'v136' // a released version of Mindustry\n    // OR\n    mindustryMirror version: '558283c6c8' // a commit snapshot from mirror\n}\n</code></pre> <pre><code>dependency {\n    mindustry on \"v136\" // a released version of Mindustry\n    // OR\n    mindustry mirror \"558283c6c8\" // a commit snapshot from mirror\n}\n</code></pre> <p>As default, mgpp will apply <code>mindustry v136</code>.</p>"},{"location":"mindustry/dependency/#notations_1","title":"Notations","text":"<ul> <li> <p>latest</p> <ul> <li> <p>For <code>mindustry</code>: To apply the latest release of Mindustry,   such as <code>v136</code>.</p> <p>NOTE: It has a very small chance that it won't work when the new version was just released.</p> </li> <li> <p>For <code>mirror</code>: To apply the latest commit of Mindustry mirror,   such as <code>558283c6c8</code>.</p> <p>NOTE: It might not work if you faced the API limit of GitHub or jitpack yet to build this version.</p> </li> </ul> </li> <li> <p>latestRelease:</p> <ul> <li>Only for <code>mindustry</code>: To apply the latest release of Mindustry,   completely the same as <code>mindustry latest</code>, such as <code>v136</code>. <p>NOTE: It has a very small chance that it won't work when the new version was just released.</p> </li> </ul> </li> </ul> GroovyKotlin <pre><code>dependency {\n    mindustry version: latest\n    mindustry version: latestRelease\n    mindustryMirror version: latest\n}\n</code></pre> <pre><code>dependency {\n    mindustry on latest\n    mindustry on latestRelease\n    mindustry mirror latest\n}\n</code></pre>"},{"location":"mindustry/deploy/","title":"Deploy","text":"<p>MGPP provides two useful tasks for deployment on Android, <code>dexJar</code> and <code>deploy</code>, but they only work when <code>java</code> plugin is enabled.</p> <p>The <code>deploy{}</code> closure is inside of <code>mindustry{}</code> closure hereinafter.</p> <p>Related tasks: <code>jar</code>, <code>dexJar</code>, <code>deploy</code> </p>"},{"location":"mindustry/deploy/#deployment-jar","title":"Deployment Jar","text":"<p>The <code>deploy</code> task will output the deployment jar, which contains <code>classes.dex</code> and your stuffs</p>"},{"location":"mindustry/deploy/#destination-directory","title":"Destination Directory","text":"<p>As default, <code>deploy</code> task outputs into its temporary directory, <code>buildDir/tmp/deploy</code>.</p> <p>You can customize its destination to fit your CI, vice versa.</p>"},{"location":"mindustry/deploy/#name","title":"Name","text":"<p>The name of deployment jar is in the pattern of <code>baseName-version-classifier.jar</code></p> <p>Default values:</p> <ul> <li>baseName: <code>name</code> in your mod meta</li> <li>version: <code>version</code> in your mod meta</li> <li>classifier: empty</li> </ul> GroovyKotlin <pre><code>deploy {\n    baseName = 'ExampleMod'\n    version = '1.0'\n    classifer = ''        \n}\n</code></pre> <pre><code>deploy {\n    baseName = \"ExampleMod\"\n    version = \"1.0\"\n    classifer = \"\"\n}\n</code></pre>"},{"location":"mindustry/deploy/#enable-fat-jar","title":"Enable fat jar","text":"<p>Whether to make a <code>fat jar</code>, which contains all dependencies from classpath, in the <code>jar</code> task.</p> <p>It's useful when you utilize other library or make a Kotlin mod.</p> <ul> <li><code>fatJar</code>: To enable fat jar.</li> <li><code>noFatJar</code>: To disable fat jar.</li> </ul> GroovyKotlin <pre><code>deploy {\n    fatJar\n    // OR\n    noFatJar\n}\n</code></pre> <pre><code>deploy {\n    fatJar\n    // OR\n    noFatJar\n}\n</code></pre> <p>MGPP will apply <code>fatJar</code> as default.</p>"},{"location":"mindustry/deploy/#android-sdk","title":"Android SDK","text":"<p>You can configure the location of Android SDK, but mgpp doesn't recommend you to do that.</p> <p>MGPP will automatically search for Android SDK in order of the environment variables mentioned below:</p> <ul> <li><code>ANDROID_HOME</code></li> <li><code>ANDROID_SDK_ROOT</code></li> </ul> GroovyKotlin <pre><code>deploy {\n    androidSdkRoot = 'D:/AnroidSDK'\n}\n</code></pre> <pre><code>deploy {\n    androidSdkRoot = \"D:/AnroidSDK\"\n}\n</code></pre>"},{"location":"mindustry/mods/","title":"Mods","text":"<p>You can add more mods working with your mod, such as a Json or Java from GitHub, a local file, an url or even a gradle task.</p> <p>The <code>mods{}</code> closure is inside of <code>mindustry{}</code> closure hereinafter.</p> <p>Related tasks: <code>resolveMods</code></p>"},{"location":"mindustry/mods/#extra-mods-from-task","title":"Extra mods from task","text":"<p>This list contains task paths whose outputs will be copied into <code>dataDir/mods</code>.</p> <p>Conventionally, when you apply <code>java</code> plugin, mgpp will add <code>jar</code> task into the list automatically.</p> GroovyKotlin <pre><code>mods {\n    extraModsFromTask += [ ':js:distZip' ]\n}\n</code></pre> <pre><code>mods {\n    extraModsFromTask += listOf( \":js:distZip\" )\n}\n</code></pre>"},{"location":"mindustry/mods/#works-with","title":"Works with","text":"<p>The <code>worksWith</code> closure let you add more mods working with yours.</p>"},{"location":"mindustry/mods/#typed-mods","title":"Typed mods","text":"<p>MGPP will follow what Mindustry did to resolve those mods.</p> <ul> <li>Jvm Mod: mgpp will download it from its GitHub release page.</li> <li>JS/Json Mod: mgpp will download the zip of whole project on GitHub.</li> </ul> Mod Type Expression Jvm Mod java, kotlin, groovy, scala, closure JS/Json Mod json, hjson, js <p>As mgpp provided, you can use the syntax mentioned below to add a mod.</p> GroovyKotlin <pre><code>mods {\n    worksWith {\n        // pattern: expression + 'repo'\n        java 'PlumyGames/mgpp'\n    }\n}\n</code></pre> <pre><code>mods {\n    worksWith {\n        // pattern: add expression + 'repo'\n        add java \"PlumyGames/mgpp\"\n    }\n}\n</code></pre> <p>For a Js/Json mod, you can specify its branch:</p> GroovyKotlin <pre><code>mods {\n    worksWith {\n        hjson 'PlumyGames/mgpp' branch 'v7'\n    }\n}\n</code></pre> <pre><code>mods {\n    worksWith {\n        add hjson \"PlumyGames/mgpp\" branch \"v7\"\n    }\n}\n</code></pre>"},{"location":"mindustry/mods/#typeless-mod","title":"Typeless mod","text":"<p>MGPP also allows to you add a mod without explicit type .</p>"},{"location":"mindustry/mods/#url-mod","title":"URL mod","text":"<p>MGPP will download it into the temporary directory of <code>resolveMods</code> task (hereinafter referred to as <code>temp</code>).</p> GroovyKotlin <pre><code>mods {\n    worksWith {\n        url 'https://example.org/ExapmleMod.jar'\n    }\n}\n</code></pre> <pre><code>mods {\n    worksWith {\n        add url \"https://example.org/ExapmleMod.jar\"\n    }\n}\n</code></pre>"},{"location":"mindustry/mods/#local-mod","title":"Local mod","text":"<p>MGPP will copy it from your local disk into <code>temp</code></p> <ul> <li>local: the file specified here will be copied. There is no effect if the file doesn't exist.</li> <li>localProperties: the value in <code>local.properties</code> file will be treated as a path for copying. There is no effect if the key doesn't exist.</li> <li>folder: all files inside this folder will be copied. The folder will be created if it doesn't exist.</li> </ul> GroovyKotlin <pre><code>mods {\n    worksWith {\n        local 'E:/mgpp/mod.jar'\n        local new File('E:/mgpp/mod.jar')\n        localProperties 'mods.what-mod-to-copy'\n        folder 'E:/mod-repository'\n        folder new File('E:/mod-repository')\n    }\n}\n</code></pre> <pre><code>mods {\n    worksWith {\n        add local \"E:/mgpp/mod.jar\"\n        add local File(\"E:/mgpp/mod.jar\")\n        add localProperties \"mods.what-mod-to-copy\"\n        add folder \"E:/mod-repository\"\n        add folder File(\"E:/mod-repository\")\n    }\n}\n</code></pre>"},{"location":"mindustry/mods/#general-github-mod","title":"General GitHub mod","text":"<p>MGPP will figure out the mod type the same as Mindustry does.</p> GroovyKotlin <pre><code>mods {\n    worksWith {\n        // In this case, it'll be treated as a Jvm mod\n        github 'PlumyGames/mgpp'\n    }\n}\n</code></pre> <pre><code>mods {\n    worksWith {\n        // In this case, it'll be treated as a Jvm mod\n        add github \"PlumyGames/mgpp\"\n    }\n}\n</code></pre>"},{"location":"mindustry/mods/#from-task","title":"From Task","text":"<p>This way is almost the same as how you add an extra mods from task, but you may benefit from its simple syntax.</p> GroovyKotlin <pre><code>mods {\n    worksWith {\n        // pattern: fromTask 'task path'\n        fromTask ':js:distZip'\n    }\n}\n</code></pre> <pre><code>mods {\n    worksWith {\n        // pattern: add fromTask 'task path'\n        add fromTask \":js:distZip\"\n    }\n}\n</code></pre>"},{"location":"mindustry/mods/#directly-add","title":"Directly add","text":"<p>Anyway, if mgpp doesn't meet your need, you can also directly add a mod, which you can implement on your own IMod class , into worksWith set.</p> GroovyKotlin <pre><code>mods {\n    worksWith {\n        worksWith.add(new YourModClass(...))\n    }\n}\n</code></pre> <pre><code>mods {\n    worksWith {\n        worksWith.add(YourModClass(...))\n    }\n}\n</code></pre>"},{"location":"mindustry/overview/","title":"Mindustry Extension","text":"<p>The <code>mindustry</code> extension allows you to configure the <code>mod.[h]json</code>, <code>dependency</code>, <code>run</code>, <code>deploy</code> and so on.</p>"},{"location":"mindustry/overview/#configurations","title":"Configurations","text":"<p>It has separated all configurations as mentioned below.</p> <ul> <li>Dependency</li> <li>Client</li> <li>Server</li> <li>Mods</li> <li>Run</li> <li>Deploy</li> </ul>"},{"location":"mindustry/overview/#project-type","title":"Project type","text":"<p>MGPP supports 2 types of project: <code>Mod</code>, <code>Plugin</code>.</p> GroovyKotlin <pre><code>mindustry {\n    projectType = Mod\n    // OR\n    projectType = Plugin\n}\n</code></pre> <pre><code>import io.github.liplum.mindustry.*\nmindustry {\n    projectType = Mod\n    // OR\n    projectType = Plugin\n}\n</code></pre> <p>It will affect the Dependency Resolution.</p> <ul> <li>Mod: Import all modules from <code>Mindustry</code> and <code>Arc</code>, including <code>core</code>, <code>desktop</code> and <code>server</code>.</li> <li>Plugin: Only import <code>core</code> and <code>server</code> module.</li> </ul>"},{"location":"mindustry/overview/#out-of-date-time","title":"Out of date time","text":"<p>It represents how much time the <code>latest</code> check will restart. Unit: second</p> GroovyKotlin <pre><code>mindustry {\n    outOfDateTime = 60 * 60 // 60 minutes\n}\n</code></pre> <pre><code>mindustry {\n    outOfDateTime = 60 * 60 // 60 minutes\n}\n</code></pre>"},{"location":"mindustry/overview/#mod-library","title":"Mod library","text":"<p>It's for anu library for Mindustry modding that benefits from MGPP.</p> <p>If <code>isLib</code> is true, the task <code>jar</code> won't contain something included in a normal mod project.</p> <ul> <li>mod.hjson</li> <li>icon.png</li> </ul> GroovyKotlin <pre><code>mindustry {\n    isLib = true\n}\n</code></pre> <pre><code>mindustry {\n    isLib = true\n}\n</code></pre>"},{"location":"mindustry/overview/#mod-meta","title":"Mod meta","text":"<p>It represents the <code>mod.[h]json</code> file of your mod. MGPP will automatically search for it by paths mentioned below orderly:</p> <ol> <li>projectDir/mod.hjson</li> <li>projectDir/mod.json</li> <li>rootDir/mod.hjson</li> <li>rootDir/mod.json</li> </ol> <p>Every key in the mod meta corresponds to every key in <code>mod.[h]json</code> file.</p> <p>You can append customized mod meta into the existed one, however, it only affects the output jar file. Thus, you could manipulate it internally in build script.</p> GroovyKotlin <pre><code>mindustry {\n    meta &lt;&lt; ModMeta(\n        name: 'test-name',\n        displayName: 'Test Display Name',\n        author: 'yourself',\n        description: '...',\n        subtitle: '...',\n        version: '1.0',\n        main: 'org.example.ExampleMod',\n        minGameVersion: '136',\n        repo: 'PlumyGames/mgpp',\n        dependencies: ['plumy/mgpp'],\n        hidden: false,\n        java: true,\n        keepOutline: false,\n    )\n}\n</code></pre> <pre><code>mindustry {\n    meta += ModMeta(\n        name = \"test-name\",\n        displayName = \"Test Display Name\",\n        author = \"yourself\",\n        description = \"...\",\n        subtitle = \"...\",\n        version = \"1.0\",\n        main = \"org.example.ExampleMod\",\n        minGameVersion = \"136\",\n        repo = \"PlumyGames/mgpp\",\n        dependencies = listOf(\"plumy/mgpp\"),\n        hidden = false,\n        java = true,\n        keepOutline = false,\n    )\n}\n</code></pre> <p>Note: Some of them only exist in higher version of Mindustry.</p>"},{"location":"mindustry/run/","title":"Run","text":"<p>The <code>run{}</code> closure is inside of <code>mindustry{}</code> closure hereinafter.</p> <p>Related tasks: <code>runClient</code>, <code>runServer</code></p>"},{"location":"mindustry/run/#data-directory","title":"Data Directory","text":"<p>Mindustry will store saves and settings in the data directory.</p> <p>Mindustry client will check an environment variable, <code>MINDUSTRY_DATA_DIR</code>, first.  </p>"},{"location":"mindustry/run/#default-data-directory","title":"Default Data Directory","text":"<p>If the data directory is invalid or not yet set, Mindustry will create the default data directory: </p> LinuxWindowsMacOS <p>$HOME/.local/share/Mindustry/</p> <p>%AppData%/Mindustry/</p> <p>$HOME/Library/Application Support/Mindustry/</p>"},{"location":"mindustry/run/#customize-data-directory","title":"Customize Data Directory","text":"<p>MGPP allows you to customize the location of data directory:</p> <ul> <li>A path: MGPP will treat it as a directory.</li> <li>useDefaultDataDir: MGPP will set it to the default.</li> <li>useTempDataDir: MGPP will set it to the temporary directory of task:<ul> <li>in case of <code>runClient</code>, it's <code>buildDir/tmp/runClient/data</code></li> <li>in case of <code>runServer</code>, it's <code>buildDir/tmp/runServer/data</code></li> </ul> </li> <li>useEnvDataDir: MGPP will check the environment variable, <code>MINDUSTRY_DATA_DIR</code>.</li> </ul> GroovyKotlin <pre><code>run {\n    dataDir = 'E:/MindustryData'\n    useDefaultDataDir\n    useTempDataDir\n    useEnvDataDir\n}\n</code></pre> <pre><code>run {\n    dataDir = 'E:/MindustryData'\n    useDefaultDataDir\n    useTempDataDir\n    useEnvDataDir\n}\n</code></pre> <p>MGPP will apply the <code>useTempDataDir</code> as default.</p>"},{"location":"mindustry/run/#overwrite-from-local-properties","title":"Overwrite from local properties","text":"<p>You can declare the <code>mgpp.run.dataDir</code> in <code>local.properties</code> file to overwrite the customized and default data directory</p> <pre><code>mgpp.run.dataDir=default\n</code></pre>"},{"location":"mindustry/run/#forcibly-clear","title":"Forcibly Clear","text":"<p>Whether to delete all mods other than any from ModsSpec.worksWith  in the data directory, ensure you have backed up your mods if it's on.</p> <ul> <li>clearOtherMods: To clear all things in the data directory.</li> <li>keepOtherMods: To keep anything in the data directory.</li> </ul> GroovyKotlin <pre><code>run {\n    clearOtherMods\n    // OR\n    keepOtherMods\n}\n</code></pre> <pre><code>run {\n    clearOtherMods\n    // OR\n    keepOtherMods\n}\n</code></pre> <p>MGPP will apply the <code>keepOtherMods</code> as default.</p>"},{"location":"mindustry/run/#overwrite-from-local-properties_1","title":"Overwrite from local properties","text":"<p>You can declare the <code>mgpp.run.forciblyClear</code> in <code>local.properties</code> file to overwrite this behavior. </p> <p>TYPE: Boolean { true, false }</p> <pre><code>mgpp.run.forciblyClear=true\n</code></pre>"},{"location":"mindustry/server/","title":"Server","text":"<p>The <code>server{}</code> closure is inside of <code>mindustry{}</code> closure hereinafter.</p> <p>Related tasks: <code>downloadServer</code>, <code>runServer</code></p> <p>NOTE: <code>Client</code> and <code>Server</code> configuration have almost the same syntax, so in these chapters, <code>client/server</code> are used, which indicates that syntax can work both sides. Please select the proper one.</p>"},{"location":"mindustry/server/#game-location","title":"Game location","text":"<p>The game location is an abstract file, which represents the Mindustry game.</p> <p>You can rename the downloaded file with this clause, <code>named</code>.</p> GroovyKotlin <pre><code>client/server {\n    official version: latest named 'LatestClient.jar'\n}\n</code></pre> <pre><code>client/server {\n    mindustry official latest named \"LatestClient.jar\"\n}\n</code></pre> <p>MGPP provides some simple clauses for downloading Mindustry: - official - be</p>"},{"location":"mindustry/server/#official","title":"Official","text":"<p>To download the game from Mindustry official release.  </p> GroovyKotlin <pre><code>client/server {\n    official version: 'v136'\n}\n</code></pre> <pre><code>client/server {\n    mindustry official \"v136\"\n}\n</code></pre> <p>As default, mgpp will download <code>v136</code>.</p>"},{"location":"mindustry/server/#notations","title":"Notations","text":"<ul> <li>latest: To download the latest official Mindustry from Mindustry official release, such as <code>v126.2</code>. NOTE: It will skip the pre-release.</li> </ul> GroovyKotlin <pre><code>client/server {\n    official version: latest\n}\n</code></pre> <pre><code>client/server {\n    mindustry official latest\n}\n</code></pre>"},{"location":"mindustry/server/#bleeding-edge","title":"Bleeding-edge","text":"<p>To download the bleeding-edge from Mindustry bleeding-edge release.  </p> GroovyKotlin <pre><code>client/server {\n    be version: '22853'\n}\n</code></pre> <pre><code>client/server {\n    mindustry be \"22853\"\n}\n</code></pre> <p>As default, mgpp will download a certain version to prevent errors when gradle configuring, but you shouldn't except this behavior.</p>"},{"location":"mindustry/server/#notations_1","title":"Notations","text":"<ul> <li>latest: To download the latest bleeding-edge Mindustry from Mindustry bleeding-edge release, such as <code>22853</code>.</li> </ul> GroovyKotlin <pre><code>client/server {\n    be version: latest\n}\n</code></pre> <pre><code>client/server {\n    be official latest\n}\n</code></pre>"},{"location":"mindustry/server/#from-local-file","title":"From local file","text":"<p>To copy the game file from a local file.</p> GroovyKotlin <pre><code>client/server {\n    fromLocal 'E:/Mindustry/myMindustry.jar'\n}\n</code></pre> <pre><code>client/server {\n    mindustry fromLocal 'E:/Mindustry/myMindustry.jar'\n}\n</code></pre>"},{"location":"mindustry/server/#overwrite-from-local-properties","title":"Overwrite from local properties","text":"<p>You can declare a property mentioned below in <code>local.properties</code>, mgpp will consider it as a path to overwrite what you have already set before</p> <ul> <li>For <code>client</code>: <code>mgpp.client.location</code></li> <li>For <code>server</code>: <code>mgpp.server.location</code></li> </ul> <p>TYPE: String</p> <pre><code>mgpp.client.location=E:/Mindustry/client.jar\nmgpp.server.location=E:/Mindustry/server.jar\n</code></pre>"},{"location":"mindustry/server/#keep-other-version","title":"Keep other version","text":"<p>Whether to keep other versions when a new version is downloaded.</p> <ul> <li><code>keepOthers</code>: To keep other versions when a new version is downloaded.</li> <li><code>clearUp</code>: To clean all other versions when a new version is downloaded.</li> </ul> GroovyKotlin <pre><code>client/server {\n    keepOthers\n    clearUp\n}\n</code></pre> <pre><code>client/server {\n    keepOthers\n    clearUp\n}\n</code></pre>"},{"location":"mindustry/server/#startup-args","title":"Startup args","text":"<p>The extra startup arguments for Mindustry game.</p> GroovyKotlin <pre><code>client/server {\n    args += [ '-gl2' ]\n}\n</code></pre> <pre><code>client/server {\n    args += listOf(\"-gl2\") \n}\n</code></pre>"},{"location":"task/overview/","title":"MGPP Tasks","text":"<p>MGPP provides many useful gradle tasks for building and debugging a mod.</p> <p>This instruction might not tell you how their classes work, but teach you how to configure those tasks. For more information about those tasks, please check the javaDoc.</p>"},{"location":"task/overview/#building","title":"Building","text":"<ul> <li>genModHjson</li> <li>genResourceClass</li> </ul>"},{"location":"task/overview/#debugging","title":"Debugging","text":"<ul> <li>downloadClient</li> <li>downloadServer</li> <li>runClient</li> <li>runServer</li> <li>resolveMods</li> </ul>"},{"location":"task/overview/#deployment","title":"Deployment","text":"<ul> <li>dexJar</li> <li>deploy</li> </ul>"},{"location":"task/overview/#extra","title":"Extra","text":"<ul> <li>antiAliasing</li> </ul>"},{"location":"task/task-antiAliasing/","title":"antiAliasing","text":""},{"location":"task/task-antiAliasing/#attributes","title":"Attributes","text":"<ul> <li>TYPE <code>io.github.liplum.mindustry.task.AntiAlias</code></li> </ul>"},{"location":"task/task-deploy/","title":"deploy","text":""},{"location":"task/task-deploy/#attributes","title":"Attributes","text":"<ul> <li>TYPE <code>org.gradle.jvm.tasks.Jar</code></li> </ul>"},{"location":"task/task-dexJar/","title":"dexJar","text":""},{"location":"task/task-dexJar/#attributes","title":"Attributes","text":"<ul> <li>TYPE <code>io.github.liplum.mindustry.task.DexJar</code></li> </ul>"},{"location":"task/task-dexJar/#dexjaroptions","title":"DexJarOptions","text":"<ul> <li><code>minApi</code>: <code>14</code> as default</li> </ul> GroovyKotlin <pre><code>dexJar {\n    options.minApi = '26'\n    // OR\n    options {\n        minApi = '26'\n    }\n}\n</code></pre> <pre><code>import io.github.liplum.mindustry.*\ntasks.dexJar {\n    options.minApi = \"26\"\n    // OR\n    options {\n        minApi = \"26\"\n    }\n}\n</code></pre>"},{"location":"task/task-downloadClient/","title":"downloadClient","text":""},{"location":"task/task-downloadClient/#attributes","title":"Attributes","text":"<ul> <li>TYPE <code>io.github.liplum.mindustry.task.Download</code></li> <li>On The Fly Can't be accessed during configuration</li> </ul>"},{"location":"task/task-downloadServer/","title":"downloadServer","text":""},{"location":"task/task-downloadServer/#attributes","title":"Attributes","text":"<ul> <li>TYPE <code>io.github.liplum.mindustry.task.Download</code></li> <li>On The Fly Can't be accessed during configuration</li> </ul>"},{"location":"task/task-genModHjson/","title":"genModHjson","text":""},{"location":"task/task-genModHjson/#attributes","title":"Attributes","text":"<ul> <li>TYPE <code>io.github.liplum.mindustry.task.ModHjsonGenerate</code></li> </ul>"},{"location":"task/task-genResourceClass/","title":"genResourceClass","text":""},{"location":"task/task-genResourceClass/#attributes","title":"Attributes","text":"<ul> <li>TYPE <code>io.github.liplum.mindustry.task.GenerateRClass</code></li> <li>On The Fly Can't be accessed during configuration</li> </ul>"},{"location":"task/task-resolveMods/","title":"resolveMods","text":""},{"location":"task/task-resolveMods/#attributes","title":"Attributes","text":"<ul> <li>TYPE <code>io.github.liplum.mindustry.task.ResolveMods</code></li> </ul>"},{"location":"task/task-runClient/","title":"runClient","text":""},{"location":"task/task-runClient/#attributes","title":"Attributes","text":"<ul> <li>TYPE <code>io.github.liplum.mindustry.task.RunMindustry</code></li> <li>On The Fly Can't be accessed during configuration</li> </ul>"},{"location":"task/task-runServer/","title":"runServer","text":""},{"location":"task/task-runServer/#attributes","title":"Attributes","text":"<ul> <li>TYPE <code>io.github.liplum.mindustry.task.RunMindustry</code></li> <li>On The Fly Can't be accessed during configuration</li> </ul>"}]}