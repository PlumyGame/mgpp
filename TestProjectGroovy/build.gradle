plugins {
    id 'java'
    id "io.github.liplum.mgpp" version "2.0.0"
}
group 'plumy.test'
version '0.1'

repositories {
    mindustryRepo()
    mavenCentral()
}
sourceSets {
    main {
        java.srcDirs('src')
        resources.srcDir('resources')
    }
    test {
        java.srcDir('test')
        resources.srcDir('resources')
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    importMindustry()
}

mindustry {
    dependency {
        //mindustry version: 'v136'
        mindustryMirror version: 'v141.2'
        // mindustryMirror version: latest
        arc version: 'v141.3'
    }
    modMeta {
        name = 'mgpp-groovy'
        displayName = 'MGPP Groovy Test'
    }
    meta.version = 'groovy 3000'
    meta.minGameVersion = '136'
    deploy {
        // fatJar is default option unless you use another tool like shadowJar
        fatJar
    }
}
deployMod {
    baseName = 'TestGroovyMod'
    version = '3.14159'
}
runMindustry {
    addModpack("for debugging") {
        testingUtilities
    }
    addModpack {
        // default modpack
        jvm repo: "liplum/CyberIO"
        json repo: "BlueWolf3682/Exotic-Mod", branch: "0.8"
    }
    def modpack2nd = addModpack("number 2") {
        json repo: "sk7725/TimeControl"
    }
    addClient {
        // anonymous 1
        official version: "v141.3"
    }
    addClient("debugging") {
        official version: "v141.3"
        modpack = "for debugging"
    }
    addClient {
        // anonymous 2
        fooClient tag: "v8.0.0", file: "erekir-client.jar"
        modpack = modpack2nd
    }
    addClient("Old Mindustry") {
        official version: "v126"
    }
    addServer {
        official version: "v141.3"
    }
}
dexJar {
    options.minApi = '26'
    options {
        minApi = '14'
    }
}
mindustryAssets {
    rootAt "$rootDir/assets"
    // There is no need to create a batch, if you use `rootAt 'foo/bar'`.
    /*sprites {
        dir = new File(rootDir, "assets/sprites")
        genClass // noGenClass is default
    }*/
}
antiAlias {
    sourceDirectory = new File(rootDir, 'assets/sprites')
    destinationDirectory = new File(rootDir, 'AA')
    addFilter {
        it.name != 'sender.png'
    }
    //incremental is default
    //options.isIncremental = false
}

test {
    useJUnitPlatform()
}